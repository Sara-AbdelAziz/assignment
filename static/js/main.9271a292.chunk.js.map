{"version":3,"sources":["components/Item.js","components/Category.js","components/Categories.js","components/App.js","serviceWorker.js","index.js"],"names":["Item","props","react_default","a","createElement","items","map","x","key","className","name","description","price","Category","categories","category","i","id","editing","type","value","onChange","e","onChangeCategory","onClick","onSave","data-toggle","data-target","aria-expanded","aria-controls","onEdit","aria-labelledby","data-parent","components_Item","Categories","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","currentCategory","target","handleSubmit","preventDefault","parentNode","querySelector","state","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","Date","getTime","then","res","json","data","console","log","oldComments","concat","catch","err","handleEdit","editedCategories","filter","c","handleSave","axios","put","response","handleChangeCategory","abc","_this2","get","onSubmit","components_Category","Component","App","components_Categories","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9271a292.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Item = (props) => (\r\n \r\n <div>\r\n    {props.items.map((items,x) => <div key={x} >\r\n    <div className=\"row\"><div className=\"col-lg-3\">Name:</div><div className=\"col-lg-9\">{items.name}</div></div>\r\n    <div className=\"row\"><div className=\"col-lg-3\">Description:</div><div className=\"col-lg-9\">{items.description}</div></div>\r\n    <div className=\"row\"><div className=\"col-lg-3\">Price:</div><div className=\"col-lg-9\">{items.price}</div></div>\r\n        <hr/>\r\n    </div>)}\r\n </div>\r\n);\r\n\r\nexport default Item;","import React from 'react';\r\nimport Item from './Item';\r\n\r\nconst Category = (props) => (\r\n \r\n <div>            \r\n     {props.categories.map((category,i) => <div key={i} className=\"card\">\r\n        <div className=\"card-header\"  id={'heading'+i}>\r\n            \r\n\r\n            {category.editing? <div><input type=\"text\" value={category.name} onChange={(e) => props.onChangeCategory(e,category)}/><button className=\"sm-font\" onClick={() => props.onSave(category)}>save</button></div> : <h2 className=\"mb-0\">\r\n            <button className=\"btn btn-link collapsed\" type=\"button\" data-toggle=\"collapse\" data-target={'#collapse'+i} aria-expanded=\"false\" aria-controls={'collapse'+i}>\r\n                {category.name}\r\n            </button>\r\n            <button onClick={() => props.onEdit(category)} className=\"sm-font\">edit</button>\r\n            </h2>}\r\n\r\n            \r\n            \r\n\r\n        </div>\r\n\r\n        <div  id={'collapse'+i} className=\"collapse\" aria-labelledby=\"{'heading'+i}\" data-parent=\"#accordionExample\">\r\n            <div className=\"card-body\">\r\n                <Item items={category.items}/>\r\n            </div>\r\n        </div>\r\n      </div>)}\r\n    \r\n\r\n </div>\r\n);\r\n\r\nexport default Category;\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport Category from './Category';\r\n//import CategoriesService from '../services/CategoriesService';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Categories extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            categories: [],\r\n            currentCategory:null,\r\n            \r\n            \r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('https://my-json-server.typicode.com/Sara-AbdelAziz/data/categories')\r\n           .then(res => {\r\n            res.data.map(c => c.editing=false);\r\n            this.setState({  categories: res.data});\r\n            \r\n          })\r\n          \r\n    }\r\n    handleChange = event => {\r\n        this.setState({ currentCategory: event.target.value });\r\n    }\r\n\r\n\r\n    handleSubmit = event => {       \r\n            event.preventDefault();\r\n            event.target.parentNode.querySelector('input').value=null;\r\n            if(this.state.currentCategory){\r\n                fetch('https://my-json-server.typicode.com/Sara-AbdelAziz/data/categories', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        id: (new Date().getTime()),\r\n                        name: this.state.currentCategory,\r\n                        items:[]\r\n                    })\r\n                }).then(res => {\r\n                    \r\n                    return res.json();\r\n                })  \r\n                .then(data => {\r\n                    console.log(data);\r\n                    let oldComments = this.state.categories;\r\n                    console.log(oldComments);\r\n                    this.setState({categories:oldComments.concat(data),currentCategory:null});\r\n                }) \r\n                .catch(err => {\r\n                    console.log(err);\r\n                });\r\n               \r\n            }else{\r\n                return ;\r\n            }   \r\n    }\r\n\r\n    handleEdit= category =>{\r\n        let editedCategories= this.state.categories.filter (c => {\r\n            if(c.id==category.id){\r\n                    c.editing=true;\r\n            }\r\n            return c;\r\n        });\r\n        this.setState({categories:editedCategories});\r\n    }\r\n\r\n    handleSave= category =>{\r\n        let editedCategories= this.state.categories.filter (c => {\r\n            if(c.id==category.id){\r\n                    c.editing=false;\r\n            }\r\n            return c;\r\n        });\r\n        this.setState({categories:editedCategories});\r\n        axios.put(`https://my-json-server.typicode.com/Sara-AbdelAziz/data/categories/${category.id}`, category).then(response => {\r\n            console.log(\"aaaaaaaa \"+response.data.id);\r\n        })\r\n    }\r\n\r\n\r\n    handleChangeCategory= (e,category)=> {\r\n        category.name=e.target.value;\r\n        console.log(\"aaaaaaaaaaaaaaaaaaaaa \"+this.state.abc);\r\n        let editedCategories= this.state.categories.filter (c => {\r\n            if(c.id==category.id){\r\n                    c.name=e.target.value;\r\n            }\r\n            return c;\r\n        });\r\n        \r\n        this.setState({categories:editedCategories});\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n        <div>\r\n            <form name=\"categoryForm\" onSubmit={this.handleSubmit}>\r\n                <label>\r\n                    <input type=\"text\" name=\"name\" onChange={this.handleChange}/>\r\n                </label>\r\n                <button type=\"submit\">Add Category</button>\r\n            </form>\r\n            <div  className=\"categories accordion\" id=\"accordionExample\"> \r\n            \r\n            \r\n                <Category editing={this.state.editing}\r\n                 categories={this.state.categories}\r\n                 onEdit={this.handleEdit} \r\n                 onSave={this.handleSave} \r\n                 onChangeCategory={this.handleChangeCategory} />\r\n                 \r\n            </div>\r\n         </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Categories;","import React, { Component } from 'react';\nimport Categories  from './Categories';\nimport '../styles/App.css';\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <div className=\"container\">\n        <Categories />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport '../node_modules/jquery/dist/jquery.min.js';\nimport '../node_modules/bootstrap/dist/js/bootstrap.min.js';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}